// strmirror creates a Go file defining a constant string with the contents of a file.
//
// Usage is simply `strmirror <file>`, which will create <file>_string.go.
package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
)

func main() {
	args := os.Args
	if len(args) < 2 {
		return
	}

	for _, filename := range args {
		writeFile(filename)
	}
}

func writeFile(filename string) {
	src, err := os.Open(filename)
	if err != nil {
		return
	}
	defer src.Close()
	ext := filepath.Ext(filename)
	name := filename[:len(filename)-len(ext)]
	f, err := os.Create(name + "_string.go")
	if err != nil {
		os.Remove(name + "_string.go")
		return
	}
	defer f.Close()
	printHeader(f, filepath.Base(name))
	io.Copy(f, src)
	printFooter(f)
	f.Close()
}

func printHeader(w io.Writer, name string) {
	fmt.Fprintf(w, "// generated by strmirror; DO NOT EDIT\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "package main\n")
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "const %s_string = `", name)
}

func printFooter(w io.Writer) {
	fmt.Fprintf(w, "`\n")
}
